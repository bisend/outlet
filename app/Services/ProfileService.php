<?php


namespace App\Services;

use App\Helpers\Country;
use App\Repositories\CategoryRepository;
use App\Repositories\CheckoutPointRepository;
use App\Repositories\DeliveryRepository;
use App\Repositories\DeliveryTypeRepository;
use App\Repositories\MetaTagRepository;
use App\Repositories\OrderProductRepository;
use App\Repositories\OrderRepository;
use App\Repositories\PaymentRepository;
use App\Repositories\ProductRepository;
use App\Repositories\ProfileRepository;
use App\Repositories\UserRepository;
use App\Repositories\WishListProductRepository;

/**
 * Class ProfileService
 * @package App\Services
 */
class ProfileService extends LayoutService
{
    /**
     * @var UserRepository
     */
    protected $userRepository;

    /**
     * @var ProfileRepository
     */
    protected $profileRepository;

    /**
     * @var PaymentRepository
     */
    protected $paymentRepository;

    /**
     * @var DeliveryRepository
     */
    protected $deliveryRepository;

    /**
     * @var WishListProductRepository
     */
    protected $wishListProductRepository;

    /**
     * @var ProductRepository
     */
    protected $productRepository;

    /**
     * @var OrderRepository
     */
    protected $orderRepository;

    /**
     * @var OrderProductRepository
     */
    protected $orderProductRepository;

    /**
     * @var MetaTagRepository
     */
    protected $metaTagRepository;

    /**
     * @var DeliveryTypeRepository
     */
    protected $deliveryTypeRepository;

    /**
     * @var CheckoutPointRepository
     */
    protected $checkoutPointRepository;

    /**
     * ProfileService constructor.
     * @param CategoryRepository $categoryRepository
     * @param UserRepository $userRepository
     * @param ProfileRepository $profileRepository
     * @param PaymentRepository $paymentRepository
     * @param DeliveryRepository $deliveryRepository
     * @param WishListProductRepository $wishListProductRepository
     * @param ProductRepository $productRepository
     * @param OrderRepository $orderRepository
     * @param OrderProductRepository $orderProductRepository
     * @param MetaTagRepository $metaTagRepository
     * @param DeliveryTypeRepository $deliveryTypeRepository
     * @param CheckoutPointRepository $checkoutPointRepository
     */
    public function __construct(CategoryRepository $categoryRepository,
                                UserRepository $userRepository,
                                ProfileRepository $profileRepository,
                                PaymentRepository $paymentRepository,
                                DeliveryRepository $deliveryRepository,
                                WishListProductRepository $wishListProductRepository,
                                ProductRepository $productRepository,
                                OrderRepository $orderRepository,
                                OrderProductRepository $orderProductRepository,
                                MetaTagRepository $metaTagRepository,
                                DeliveryTypeRepository $deliveryTypeRepository,
                                CheckoutPointRepository $checkoutPointRepository)
    {
        parent::__construct($categoryRepository);

        $this->userRepository = $userRepository;

        $this->profileRepository = $profileRepository;

        $this->paymentRepository = $paymentRepository;

        $this->deliveryRepository = $deliveryRepository;

        $this->wishListProductRepository = $wishListProductRepository;

        $this->productRepository = $productRepository;

        $this->orderRepository = $orderRepository;

        $this->orderProductRepository = $orderProductRepository;

        $this->metaTagRepository = $metaTagRepository;

        $this->deliveryTypeRepository = $deliveryTypeRepository;

        $this->checkoutPointRepository = $checkoutPointRepository;
    }

    /**
     * @param $model
     */
    public function fill($model)
    {
        parent::fill($model); // TODO: Change the autogenerated stub

        $this->fillMetaTags($model);
    }

    public function fillProfile($model)
    {
        $model->profile = $this->profileRepository->getProfile($model);
    }

    /**
     * save user name
     * @param $userId
     * @param $name
     */
    public function saveUserName($userId, $name)
    {
        $this->userRepository->saveUserName($userId, $name);
    }

    /**
     * save phone number
     * @param $userId
     * @param $phone
     */
    public function saveProfilePhoneNumber($userId, $phone)
    {
        $this->profileRepository->saveProfilePhoneNumber($userId, $phone);
    }

    /**
     * check if email changed
     * @param $userId
     * @param $email
     * @return bool
     */
    public function checkIfEmailChanged($userId, $email)
    {
        return $this->userRepository->checkIfEmailChanged($userId, $email);
    }

    /**
     * check if new email valid
     * @param $email
     * @return bool
     */
    public function checkIfNewEmailValid($email)
    {
        return $this->userRepository->checkIfNewEmailValid($email);
    }

    /**
     * save new email
     * @param $userId
     * @param $email
     */
    public function saveNewEmail($userId, $email)
    {
        $this->userRepository->saveNewEmail($userId, $email);
    }

    /**
     * change password
     * @param $userId
     * @param $newPassword
     */
    public function changePassword($userId, $newPassword)
    {
        $this->userRepository->changePassword($userId, $newPassword);
    }

    /**
     * fill deliveries
     * @param $model
     */
    public function fillDeliveries($model)
    {
        $model->deliveries = $this->deliveryRepository->getAllDeliveries($model);
    }

    /**
     * fill selected delivery ID
     * @param $model
     */
    public function fillSelectedDeliveryId($model)
    {
        $model->selectedDeliveryId = $this->profileRepository->getSelectedDeliveryId($model);
    }

    /**
     * fill selected delivery
     * @param $model
     */
    public function fillSelectedDelivery($model)
    {
        $model->delivery = $this->deliveryRepository->getDelivery($model);
    }

    /**
     * fill delivery types
     * @param $model
     */
    public function fillDeliveryTypes($model)
    {
        $model->deliveryTypes = $this->deliveryTypeRepository->getDeliveryTypes($model);
    }

    /**
     * fill selected deliveryType ID
     * @param $model
     */
    public function fillSelectedDeliveryTypeId($model)
    {
        $model->selectedDeliveryTypeId = $this->profileRepository->getSelectedDeliveryTypeId($model);
    }

    /**
     * fill selected deliveryType
     * @param $model
     */
    public function fillSelectedDeliveryType($model)
    {
        $model->deliveryType = $this->deliveryTypeRepository->getDeliveryType($model);
    }


    public function fillCountries($model)
    {
        $model->countries = Country::getData($model->language);
    }

    public function fillSelectedCountryCode($model)
    {
        $model->selectedCountryCode = $this->profileRepository->getSelectedCountryCode($model);
    }

    public function fillSelectedCountry($model)
    {
        $model->country = Country::getSelectedCountry($model);
    }

    public function fillCheckoutPoints($model)
    {
        $model->checkoutPoints = $this->checkoutPointRepository->getCheckoutPoints($model);
    }

    public function fillSelectedCheckoutPointId($model)
    {
        $model->selectedCheckoutPointId = $this->profileRepository->getSelectedCheckoutPointId($model);
    }

    public function fillSelectedCheckoutPoint($model)
    {
        $model->checkoutPoint = $this->checkoutPointRepository->getCheckoutPoint($model);
    }

    public function fillSelectedCityRef($model)
    {
        $model->selectedCityRef = $this->profileRepository->getSelectedCityRef($model);
    }

    public function fillSelectedWarehouseRef($model)
    {
        $model->selectedWarehouseRef = $this->profileRepository->getSelectedWarehouseRef($model);
    }

    public function fillSelectedStreet($model)
    {
        $model->selectedStreet = $this->profileRepository->getSelectedStreet($model);
    }

    public function fillSelectedLand($model)
    {
        $model->selectedLand = $this->profileRepository->getSelectedLand($model);
    }

    public function fillSelectedCity($model)
    {
        $model->selectedCity = $this->profileRepository->getSelectedCity($model);
    }

    public function fillSelectedIndex($model)
    {
        $model->selectedIndex = $this->profileRepository->getSelectedIndex($model);
    }

    /**
     * @param $deliveryId
     * @param $deliveryTypeId
     */
    public function savePaymentDelivery($deliveryId, $deliveryTypeId, $checkoutPointId, $countryName,
                                        $countryCode, $city, $cityRef, $warehouse, $warehouseRef, $aStreet, $aLand, $aCity, $postIndex)
    {
        $this->profileRepository->savePaymentDelivery($deliveryId, $deliveryTypeId, $checkoutPointId, $countryName,
            $countryCode, $city, $cityRef, $warehouse, $warehouseRef, $aStreet, $aLand, $aCity, $postIndex);
    }

    /**
     * add product to wish list
     * @param $wishListId
     * @param $productId
     * @param $sizeId
     */
    public function addToWishList($wishListId, $productId, $sizeId)
    {
        $this->wishListProductRepository->addToWishList($wishListId, $productId, $sizeId);
    }

    /**
     * delete product from wish list
     * @param $wishListProductId
     */
    public function deleteFromWishList($wishListProductId)
    {
        $this->wishListProductRepository->deleteFromWishList($wishListProductId);
    }

    /**
     * return wish list items with products
     * @param $wishListId
     * @param $language
     * @param $userTypeId
     * @return array
     */
    public function getWishListItems($wishListId, $language, $userTypeId)
    {
        $wishListProducts = $this->wishListProductRepository->getWishListProducts($wishListId);

        $productIds = [];

        $wishListItems = [];

        $newWishListItems = [];

        foreach ($wishListProducts as $wishListProduct)
        {
            $productIds[] = $wishListProduct->product_id;
            $wishListItems[] = [
                'productId' => $wishListProduct->product_id,
                'sizeId' => $wishListProduct->size_id,
                'wishListProductId' => $wishListProduct->id
            ];
        }

        $products = $this->productRepository->getWishListProducts($productIds, $language, $userTypeId);

        foreach ($wishListItems as $wishListItem)
        {
            foreach ($products as $product)
            {
                if ($wishListItem['productId'] == $product->id)
                {
                    $newWishListItems[] = [
                        'wishListProductId' => $wishListItem['wishListProductId'],
                        'productId' => $wishListItem['productId'],
                        'sizeId' => $wishListItem['sizeId'],
                        'product' => $product
                    ];
                    $wishListItem['product'] = $product;
                }
            }
        }

        return $newWishListItems;
    }

    /**
     * return wish list products count
     * @param $wishListItems
     * @return int
     */
    public function getTotalWishListCount($wishListItems)
    {
        return count($wishListItems);
    }

    /**
     * get orders
     * @param $model
     */
    public function getOrders($model)
    {
        $model->orders = $this->orderRepository->getOrders($model);
    }

    /**
     * fill order items
     * @param $model
     */
    public function getOrdersItems($model)
    {
        $orders = $model->orders;

        foreach ($orders as $order)
        {
            $productIds = [];

            $orderItems = [];

            $newOrderItems = [];

            $orderProducts = $this->orderProductRepository->getOrderProducts($order->id);

            foreach ($orderProducts as $orderProduct)
            {
                $productIds[] = $orderProduct->product_id;
                $orderItems[] = [
                    'productId' => $orderProduct->product_id,
                    'sizeId' => $orderProduct->size_id,
                    'productCount' => $orderProduct->product_count,
                    'price' => $orderProduct->price
//                    'orderProductId' => $wishListProduct->id
                ];
            }

            $products = $this->productRepository->getOrdersProducts($productIds, $model->language, $model->user->user_type_id);

            foreach ($orderItems as $orderItem)
            {
                foreach ($products as $product)
                {
                    if ($orderItem['productId'] == $product->id)
                    {
                        $newOrderItems[] = [
//                            'wishListProductId' => $wishListItem['wishListProductId'],
                            'productId' => $orderItem['productId'],
                            'sizeId' => $orderItem['sizeId'],
                            'productCount' => $orderItem['productCount'],
                            'price' => $orderItem['price'],
                            'product' => $product
                        ];
                        $orderItem['product'] = $product;
                    }
                }
            }

            $order->orderItems = $newOrderItems;
        }
    }

    /**
     * fill orders total count
     * @param $model
     */
    public function getTotalOrdersCount($model)
    {
        $model->totalOrdersCount = $this->orderRepository->getTotalOrdersCount($model);
    }

    private function fillMetaTags($model)
    {
        $metaTag = $this->metaTagRepository->getMetaTagByPageName($model);
        $model->title = $metaTag->title;
        $model->description = $metaTag->description;
        $model->keywords = $metaTag->keywords;
        $model->h1 = $metaTag->h1;
    }
}