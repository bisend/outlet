<?php

namespace App\Services;

use App\Repositories\CategoryRepository;
use App\Repositories\MetaTagRepository;
use App\Repositories\ProductRepository;

/**
 * Class SearchService
 * @package App\Services
 */
class SearchService extends LayoutService
{
    /**
     * @var ProductRepository
     */
    private $productRepository;

    private $metaTagRepository;

    /**
     * SearchService constructor.
     * @param CategoryRepository $categoryRepository
     * @param ProductRepository $productRepository
     * @param MetaTagRepository $metaTagRepository
     */
    public function __construct(CategoryRepository $categoryRepository,
                                ProductRepository $productRepository,
                                MetaTagRepository $metaTagRepository)
    {
        parent::__construct($categoryRepository);

        $this->productRepository = $productRepository;

        $this->metaTagRepository = $metaTagRepository;
    }

    /**
     * @param $model
     */
    public function fill($model)
    {
        parent::fill($model); // TODO: Change the autogenerated stub

        $this->fillSearchProducts($model);

        $this->fillCountSearchProducts($model);

        $this->fillMetaTags($model);
    }

    /**
     * fill search products
     * @param $model
     */
    private function fillSearchProducts($model)
    {
        $model->searchProducts = $this->productRepository->getAllProductsForSearch($model);

        if (!is_null($model->searchProducts) && $model->searchProducts->count() > 0)
        {
            foreach ($model->searchProducts as $searchProduct)
            {
                $searchProduct->currentSizeId = $searchProduct->sizes[0]->id;
            }
        }
    }

    /**
     * fill count search products
     * @param $model
     */
    private function fillCountSearchProducts($model)
    {
        $model->countSearchProducts = $this->productRepository->getCountSearchProducts($model);
    }

    /**
     * fill model via ajax
     * @param $model
     */
    public function fillAjax($model)
    {
        $this->fillAjaxSearchProducts($model);
        $this->fillCountSearchProducts($model);
    }

    /**
     * fill ajax search products
     * @param $model
     */
    public function fillAjaxSearchProducts($model)
    {
        $model->searchProducts = $this->productRepository->getAjaxSearchProducts($model);
    }

    private function fillMetaTags($model)
    {
        $meta_tag = $this->metaTagRepository->getMetaTagByPageName($model);
        $model->title = $meta_tag->meta_title;
        $model->description = $meta_tag->meta_description;
        $model->keywords = $meta_tag->meta_keywords;
        $model->h1 = $meta_tag->meta_h1;
    }
}